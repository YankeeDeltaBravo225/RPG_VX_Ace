#==============================================================================
# ■ RGSS3 簡易アニメーション by YankeeDeltaBravo225
#    https://github.com/YankeeDeltaBravo225/RPG_VX_Ace/
#
#    指定した複数のPictureをフレームごとに切り替えることでアニメーションさせます。
#    再生されるのはその後のテキストウィンドウ表示中です。
#    必ず用が済んだら erase を実行してください。
#
#    【例】
#
#    スクリプト：
#    screen.pictures[23].ea_animate(["kuma_attack_1", "kuma_attack_2","kuma_attack_3"], 4)
#    screen.pictures[23].ea_sound("Attack_sound")
#    文章:
#    「クマが襲ってきた」
#    スクリプト：
#    screen.pictures[23].erase
#==============================================================================



#==============================================================================
# ■ 【独自クラス】 EasyAnime_Prop
#------------------------------------------------------------------------------
#  表示するピクチャの差し替えタイミングを管理するクラスです。
#
#  注意：
#  こちらを直接操作しないで下さい。
#==============================================================================
class EasyAnime_Prop

  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 EasyAnime_Prop.new 時に呼ばれるコンストラクタです
  #--------------------------------------------------------------------------
  def initialize(picts, interval)
    @interval  = interval
    @picts     = picts

    @rate      = 1.0
    @frames    = nil

    schedule
    restart
  end


  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 アニメーションに音声を設定します
  #--------------------------------------------------------------------------
  def sound(name, ofs, vol)
    @se_name = name
    @se_ofs  = ofs
    @se_vol  = vol

    schedule
  end


  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 何フレーム目に表示物を更新すべきか計算します
  #--------------------------------------------------------------------------
  def schedule
    @frames = {}

    if @rate <= 0.0
      @frames[0] = @picts[0], nil
      return
    end

    se_rate = (100 + (@rate/2) ).to_i
    se_prop = {:name => @se_name, :vol => @se_vol, :pitch => se_rate }

    @picts.each_with_index{|pict, idx|
      pos = ( idx * @interval ) / @rate   
      se  = ( idx == @se_ofs ) ? se_prop : nil
      @frames[pos.to_i] = pict, se
    }

    @period = ( ( @interval * @picts.length ) / @rate ).to_i
  end


  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 再生速度を設定します
  #--------------------------------------------------------------------------
  def speed(rate)
    @rate = rate
    schedule
  end


  #--------------------------------------------------------------------------
  # ● 【独自メソッド】カウントを最初から始めます
  #--------------------------------------------------------------------------
  def restart
    @count = 0
  end


  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 更新画像/音声を判定します
  #--------------------------------------------------------------------------
  def update
    return @frames[0] if @rate <= 0.0
    
    frame = @frames[@count]
    @count = (@count + 1) % @period
    
    return frame
  end

end #class EasyAnime_Prop


#==============================================================================
# ■ 【再定義クラス】 Game_Picture
#------------------------------------------------------------------------------
#  画面の更新時に呼ばれるUpdateメソッドを再定義します。
#
#  Update呼び出しの際に表示するPictureを差し替えることでアニメーションを実現します。
#==============================================================================
class Game_Picture

  #--------------------------------------------------------------------------
  # ● 【再定義メソッド】 画面の更新
  #
  # 表示ピクチャ・音声音声の切り替え処理の後、更新を行う元々のUpdteメソッドを呼び出します
  #
  # 注意
  #   こちらは直接呼び出さないでください
  #--------------------------------------------------------------------------
  alias orig_update_ea update
  def update
    if @ea_prop
      pict, se = @ea_prop.update
      if pict
        @name = pict
      end
      if se and (not @ea_mute)
        RPG::SE.new(se[:name], se[:vol], se[:pitch]).play
      end
    end

    orig_update_ea       #元のupdate呼び出し
  end


  #--------------------------------------------------------------------------
  # ● 【再定義メソッド】 画面の消去
  #
  # ゲームエンジンのピクチャ消去の呼び出し後に、
  # アニメーション管理オブジェクトの消去(GC任せ)を行います
  #
  # 注意
  #   こちらは直接呼び出さないでください
  #--------------------------------------------------------------------------
  alias orig_erase_ea
             erase
  def erase
    orig_erase_ea        #元のerase呼び出し

    @ea_prop = nil
  end

  
  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 表示位置などのリセット
  #
  # 注意
  #   こちらは直接呼び出さないでください
  #--------------------------------------------------------------------------
  def ea_normalize()
    origin     = 0
    x          = 0 
    y          = 0 
    zoom_x     = 100
    zoom_y     = 100
    opacity    = 255
    blend_type = 0
    
    show("", origin, x, y, zoom_x, zoom_y, opacity, blend_type)
  end
  

  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 アニメーションの表示
  #
  # 画像のリピートアニメーションにはこちらを呼んでください。
  #
  # picts    : 表示する画像名の配列
  # interval : 次のピクチャに移るまでの間隔(frame数)
  #--------------------------------------------------------------------------
  def ea_animate( picts, interval )
    @ea_prop = EasyAnime_Prop.new(picts, interval)
    ea_normalize()
  end

  
  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 静止画像の表示
  #
  # 静止画像を表示します
  #
  # pict     : 表示する画像名
  #--------------------------------------------------------------------------
  def ea_draw( pict )
    @ea_prop = EasyAnime_Prop.new( [picts], 0)

    @ea_prop.speed(0)
    ea_normalize()
  end


  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 アニメーションへの音声の付加
  #
  # name     : サウンド名
  # offset   : 音声再生を遅らせる場合のフレーム数、省略可
  # vol      : 音量を絞るとき何パーセントにするか、省略可
  #--------------------------------------------------------------------------
  def ea_sound( name, offset=0, vol=100 )
    return unless @ea_prop
    @ea_prop.sound(name, offset, vol)
  end


  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 アニメーションを速く or 遅くする
  #
  # rate     : 1.0:等倍(デフォルト), 2.0:倍速, 0.5:スロー再生
  #--------------------------------------------------------------------------
  def ea_speed(rate)
    @ea_prop.speed(rate)   if @ea_prop
  end


  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 アニメーションを一時的に非表示にする
  #
  # 注意
  #     たとえ非表示状態でも、使用が終われば必ずeraseして下さい
  #--------------------------------------------------------------------------
  def ea_hide()
    @opacity = 0
    @ea_mute = true
  end


  #--------------------------------------------------------------------------
  # ● 【独自メソッド】 アニメーションを再度表示状態する
  #--------------------------------------------------------------------------
  def ea_show()
    @opacity = 255
    @ea_mute = false
  end
  
end #class Game_Picture
